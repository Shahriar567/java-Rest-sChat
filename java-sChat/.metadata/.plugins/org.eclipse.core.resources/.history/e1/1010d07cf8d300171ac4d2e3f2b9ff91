package messanger.sChat.resources;


import java.util.List;
import java.net.URI;

import javax.ws.rs.BeanParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import messanger.sChat.model.Message;
import messanger.sChat.resources.beans.MessageFilterBean;
import messanger.sChat.service.MessageService;

@Path("/messages")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class MessageResources {

	MessageService messageService = new MessageService();
	
//	@GET
//	public List<Message> getMessages(@BeanParam MessageFilterBean filterBean) {
//		
//		if (filterBean.getYear() > 0) {
//			return messageService.getAllMessagesForYear(filterBean.getYear());
//		}
//		if (filterBean.getStart() >= 0 && filterBean.getSize() > 0) {
//			return messageService.getAllMessagesPaginated(filterBean.getStart(), filterBean.getSize());
//		}
//		return messageService.getAllMessages();
//	}
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Message> getMessages(){
		return messageService.getAllMessages();
	} 
	
	
	
	@POST
	public Response addMessage(Message message, @Context UriInfo uriInfo) {
		
		return  messageService.addMessage(message);
		
	}
	
	@PUT
	@Path("/{messageId}")
	public Message updateMessage(@PathParam("messageId") long id, Message message) {
		message.setId(id);
		return messageService.updateMessage(message);
	}
	
	@DELETE
	@Path("/{messageId}")
	public void deleteMessage(@PathParam("messageId") long id) {
		messageService.removeMessage(id);
	}
	
	
	@GET
	@Path("/{messageId}")
	public Message getMessage(@PathParam("messageId") long id, @Context UriInfo uriInfo) {
		Message message = messageService.getMessage(id);		
		return message;
		
	}


	
}